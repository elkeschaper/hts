# (C) 2015 Elke Schaper

"""
    :synopsis: Input/output for screen data.

    .. moduleauthor:: Elke Schaper <elke.schaper@isb-sib.ch>
"""

import csv
import logging
import os
import re

LOG = logging.getLogger(__name__)

################################## READ SCREEN DATA  #########################


def read_envision_csv(file):
    """Read screen data file in [] format.

    The envision .csv file structure is not described publicly.
    It may be read in as a .csv file.

    The general file format is (luminescence example)::

        Plate information
        Plate,Repeat,Barcode,Measured height,Chamber temperature at start,Chamber temperature at end,Humidity at start,Humidity at end,Ambient temperature at start,Ambient temperature at end,Formula,Measurement date,
        1,1,,N/A,N/A,N/A,N/A,N/A,N/A,N/A,Calc 1: Crosstalk = Crosstalk correction where Label : US LUM 384 (cps)(1) channel 1,5/23/2015 16:41:02,

        Background information
        Plate,Label,Result,Signal,Flashes/Time,Meastime,MeasInfo,
        1,US LUM 384 (cps),0,3896,0.1,00:00:00.000,De=USLum Ex=N/A Em=N/A Wdw=N/A,

        27880,90040,6314480,6866120,7064360,7495280,7444560,7967720,7581640,8013480,8003800,8386840,8264000,8063960,7586280,7541760,8116560,8175520,8164640,7956520,7960440,7596680,168960,47000,
        42200,143720,7661600,7987840,8128920,8284800,8602480,8513080,8606000,8800960,8388760,8792520,8588520,8438760,8174720,8362200,8271280,8561720,8322160,8375560,8243640,7986680,171840,58280,
        49960,152920,8006520,8555840,8395680,8338240,8336760,8225720,8555840,8427720,8408880,8427800,8448560,8189920,8498800,8784560,8418480,8263760,8718480,8276200,8351440,8119240,174720,58800,
        50320,146320,7972520,8241160,8394440,8389360,8547840,8589160,8484840,8760520,8407200,8600920,8354160,8469600,8831160,8599920,8459360,8572960,8633920,8246800,9091200,8087600,174360,61400,
        50520,160760,8630160,8331000,8026720,8379800,8368800,8360920,8694200,8313320,8403720,8603720,8460840,8298080,8450040,8575720,9203200,9215560,8301600,8654520,8672280,8410840,174520,62360,
        50920,148080,8033960,8308480,8274960,8243480,8375960,8576080,8197400,8392400,8731920,8643560,8568720,8308680,8236840,8265280,9154640,9374480,8498200,8415400,8756600,8353160,174160,60400,
        52960,144080,7798040,8085440,8190400,7954800,8142320,7981600,8259640,8016800,8087040,8097640,8056320,7898400,7843760,8325080,8361280,8510960,7828040,8369680,8060600,7444600,161440,59800,
        50120,145400,7783760,7533040,7389480,8032120,7825960,7477880,7264160,7182400,8141320,7842360,7610760,7041360,7355960,7328680,7687000,7232400,7529480,7211440,7091960,7065080,144560,55600,
        49640,138480,7924440,7965320,8475000,8921800,8266640,8091680,8152880,8036600,7972800,8120280,8045120,7978760,7691840,8749720,8850000,8800720,8621680,8094320,7933200,8389240,175080,54520,
        48680,145240,8024480,8331400,8225280,8334040,8393400,8306400,8225960,8000680,7967920,7903760,8433200,8161960,7901560,8523240,8925800,8372280,8529520,8882720,8551080,8390480,173120,53240,
        51160,149200,8173320,8556000,8215000,8127600,8234800,8644080,8298800,8165760,7932640,7823760,8611000,8209520,8391360,8436080,8420160,8889120,8887560,8712840,8285040,8807680,179400,54040,
        50760,158600,8063400,8324480,8088840,8183320,7860520,8184560,8097480,7907720,7821400,8065480,8257560,8282920,8477000,8203040,8796040,8617480,8515800,8527280,8756480,8323160,166280,55080,
        50080,158600,8100640,8248480,8102800,8189200,8243920,8404040,8428960,8119400,8128080,8174360,8454080,9175480,8454920,8871360,8404120,8412720,8378200,8721800,8354640,8135040,163040,55600,
        48320,144800,8100600,8127600,8225840,8602760,8275280,8765040,8485040,8425920,8016720,8561280,9294000,8747760,8609720,8663520,8497240,8517520,8713440,8572840,8423920,8697920,164040,58680,
        45240,136360,7895040,7838120,7994680,8014320,8292720,8238080,8180600,7901440,8385880,8217400,8515040,8505480,9591720,9629720,8327040,8338560,8622040,8810000,8428240,8394080,168920,60040,
        41280,138080,7523960,7681600,7770920,8126640,8142200,7769360,7562400,7553120,7810280,7687320,8150400,7966120,9034840,9346880,8305920,8614160,8505400,8409480,8383360,8055640,155120,53440,

        Plate information
        Plate,Repeat,Barcode,Measured height,Chamber temperature at start,Chamber temperature at end,Humidity at start,Humidity at end,Ambient temperature at start,Ambient temperature at end,Group,Label,ScanX,ScanY,Measinfo,Kinetics,Measurement date,
        1,1,,14.76,26.18,26.11,30.5,30.7,24.19,24.12,1,US LUM 384 (cps)(1),0,0,De=USLum Ex=N/A Em=N/A Wdw=N/A,0,5/23/2015 16:41:02,

        Background information
        Plate,Label,Result,Signal,Flashes/Time,Meastime,MeasInfo,
        1,US LUM 384 (cps),0,3896,0.1,00:00:00.000,De=USLum Ex=N/A Em=N/A Wdw=N/A,

        27880,90040,6314480,6866120,7064360,7495280,7444560,7967720,7581640,8013480,8003800,8386840,8264000,8063960,7586280,7541760,8116560,8175520,8164640,7956520,7960440,7596680,168960,47000,
        42200,143720,7661600,7987840,8128920,8284800,8602480,8513080,8606000,8800960,8388760,8792520,8588520,8438760,8174720,8362200,8271280,8561720,8322160,8375560,8243640,7986680,171840,58280,
        49960,152920,8006520,8555840,8395680,8338240,8336760,8225720,8555840,8427720,8408880,8427800,8448560,8189920,8498800,8784560,8418480,8263760,8718480,8276200,8351440,8119240,174720,58800,
        50320,146320,7972520,8241160,8394440,8389360,8547840,8589160,8484840,8760520,8407200,8600920,8354160,8469600,8831160,8599920,8459360,8572960,8633920,8246800,9091200,8087600,174360,61400,
        50520,160760,8630160,8331000,8026720,8379800,8368800,8360920,8694200,8313320,8403720,8603720,8460840,8298080,8450040,8575720,9203200,9215560,8301600,8654520,8672280,8410840,174520,62360,
        50920,148080,8033960,8308480,8274960,8243480,8375960,8576080,8197400,8392400,8731920,8643560,8568720,8308680,8236840,8265280,9154640,9374480,8498200,8415400,8756600,8353160,174160,60400,
        52960,144080,7798040,8085440,8190400,7954800,8142320,7981600,8259640,8016800,8087040,8097640,8056320,7898400,7843760,8325080,8361280,8510960,7828040,8369680,8060600,7444600,161440,59800,
        50120,145400,7783760,7533040,7389480,8032120,7825960,7477880,7264160,7182400,8141320,7842360,7610760,7041360,7355960,7328680,7687000,7232400,7529480,7211440,7091960,7065080,144560,55600,
        49640,138480,7924440,7965320,8475000,8921800,8266640,8091680,8152880,8036600,7972800,8120280,8045120,7978760,7691840,8749720,8850000,8800720,8621680,8094320,7933200,8389240,175080,54520,
        48680,145240,8024480,8331400,8225280,8334040,8393400,8306400,8225960,8000680,7967920,7903760,8433200,8161960,7901560,8523240,8925800,8372280,8529520,8882720,8551080,8390480,173120,53240,
        51160,149200,8173320,8556000,8215000,8127600,8234800,8644080,8298800,8165760,7932640,7823760,8611000,8209520,8391360,8436080,8420160,8889120,8887560,8712840,8285040,8807680,179400,54040,
        50760,158600,8063400,8324480,8088840,8183320,7860520,8184560,8097480,7907720,7821400,8065480,8257560,8282920,8477000,8203040,8796040,8617480,8515800,8527280,8756480,8323160,166280,55080,
        50080,158600,8100640,8248480,8102800,8189200,8243920,8404040,8428960,8119400,8128080,8174360,8454080,9175480,8454920,8871360,8404120,8412720,8378200,8721800,8354640,8135040,163040,55600,
        48320,144800,8100600,8127600,8225840,8602760,8275280,8765040,8485040,8425920,8016720,8561280,9294000,8747760,8609720,8663520,8497240,8517520,8713440,8572840,8423920,8697920,164040,58680,
        45240,136360,7895040,7838120,7994680,8014320,8292720,8238080,8180600,7901440,8385880,8217400,8515040,8505480,9591720,9629720,8327040,8338560,8622040,8810000,8428240,8394080,168920,60040,
        41280,138080,7523960,7681600,7770920,8126640,8142200,7769360,7562400,7553120,7810280,7687320,8150400,7966120,9034840,9346880,8305920,8614160,8505400,8409480,8383360,8055640,155120,53440,


        Basic assay information
        Assay ID: ,,,,13383
        Assay Started: ,,,,5/23/2015 16:39:34
        Assay Finished: ,,,,5/23/2015 16:41:04
        Assay Exported: ,,,,5/23/2015 16:41:11
        Protocol ID: ,,,,50035
        Protocol Name: ,,,,US LUM 384
        Serial#: ,,,,1040204



        Protocol information
        Protocol:
        Protocol name,,,,US LUM 384
        Number of assay repeats,,,,1
        Start assay repeat each,,,,N/A
        Number of plate repeats,,,,1
        Start plate repeat each,,,,N/A
        Is label meas. height used,,,,Yes
        Height of measurement,,,,Defined in label
        Is gripper height used,,,,No
        Mode of measurement,,,,By Rows  bi-directional
        Rotated plate,,,,No
        Soft move,,,,No
        Protocol notes,,,,

        Plate type:
        Name of the plate type,,,,384 General
        Number of rows,,,,16
        Number of columns,,,,24
        Number of the wells in the plate,,,,384
        Height of the plate,,,,14.35 mm

        Coordinates of corners:
        384 General
        12.13 mm x------------------------------------------------------ x 115.63 mm
        8.99 mm                                                            8.99 mm

        12.13 mm x------------------------------------------------------ x 115.63 mm
        76.49 mm                                                           76.49 mm

        Platemap:
        Plate,,,,1
        Group,,,,1

        ,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,
        A,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        B,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        C,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        D,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        E,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        F,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        G,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        H,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        I,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        J,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        K,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        L,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        M,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        N,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        O,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-
        P,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,- ,-

         - - Undefined

        Calculations:
        Plate,,,,1
         Formula index,,,,Calc 1
         Formula name,,,,CrossTalk
         Formula,,,,Crosstalk where Label : US LUM 384 (cps)(1) channel 1

        Auto export parameters:
        Export format,,,,Plate
        Include basic assay information,,,,Yes
        Place assay information at,,,,End of file
        Include basic plate information,,,,Yes
        Place plate information at,,,,Beginning of plate
        Include protocol information,,,,Yes
        Protocol info level,,,,Large
        Include error and warning information,,,,Yes
        Include background information,,,,Yes
        Add plate number to the file name,,,,Yes
        Each plate to separate file,,,,No
        Field separator to use,,,,System
        File name format,,,,<DefaultDataFolder>\<Date>\<Time>_<AssayID>.csv

        Operations:
        Plate 1
          Group 1
            Measurement
              Label,,,,US LUM 384 (cps)(1)

        Labels:
        US LUM 384 (cps),,,,7500004
        Measurement height,,,,0 mm
        Measurement time,,,,0.1 s
        CT,,,,0
        Aperture,,,,384 Plate US Luminescence aperture
        Last edited,,,,10/16/2008 14:06:15
        Last edited by,,,,Installation
        Factory preset,,,,Yes

        Aperture:
        384 Plate US Luminescence aperture,,,,9
        Height,,,,4.2 mm
        Diameter,,,,3.7 mm
        Description,,,,Can also be used in 96 plate
        Last edited,,,,10/16/2008 14:06:15
        Last edited by,,,,Installation
        Factory preset,,,,Yes

        Instrument:
        Serial number,,,,1040204
        Nickname,,,,EnVision

        Normalization:





        Exported with EnVision Workstation version X.XX Build X


    .. todo:: Extract all necessary information
    .. todo:: Show correct output format


    Args:
        filename (str): Path to the file with  data in the envision
            file format.


    Returns:
        plate_info (dict of ?): Information per plate
        channel_wise_reads (dict of list of lists): Read out tales
        channel_wise_info (dict of ?): Information per read out table

    """

    pat_info = ['Plate', 'Repeat', 'Barcode', 'Measured height']
    pat_background = ['Plate', 'Label', 'Result']



    # Our possible parser states:
    #
    # 0: searching for Plate information header & store
    # 0.2 : storing plate information row
    # 2: searching for background information header & store.
    # 2.2: storing background information
    # 2.3: storing plate data

    # 4: searching for basic assay information
    # 4.1: search for Assay ID
    # 4.2: search for Assay Start
    # 4.3: search for Assay Finished
    # 4.4: search for Protocol ID
    # 4.5: search for Protocol Name
    # 4.6: search for Serial hash
    # 5: search for Exported with EnVision Workstation version number

    state = 0
    data_plate_count = 0
    channel_wise_reads = {}
    channel_wise_info = {}
    plate_info = {}
    with open(file) as csvfile:
        #dialect = csv.Sniffer().sniff(csvfile.read(1024))
        #sample_text = ''.join(csvfile.readline() for x in range(3))
        #dialect = csv.Sniffer().sniff(sample_text)
        #reader = csv.reader(csvfile, dialect)
        #csvfile.seek(0)
        #import pdb; pdb.set_trace()
        reader = csv.reader(csvfile, delimiter = ",")
        for i, line in enumerate(reader):
            if len(line) <= 1:
                continue
            #print(line)
            LOG.debug("Line %s: %s", i, line)
            if 0 == state:
                if pat_info == line[:4]:
                    LOG.debug(" * (0->0.2) Found plate info & Store plate info tags.")
                    plate_info_tags = line
                    state = 0.2

            elif 0.2 == state:
                plate_info = {i:j for i,j in zip(plate_info_tags, line) if i != ""}
                LOG.debug(" * (0.2->2) Store plate info.")
                state = 2

            elif 2 == state:
                if pat_background == line[:3]:
                    data_plate_count += 1
                    data_background_info_tags = line
                    LOG.debug(" * (2->2.2) Found plate data start.")
                    state = 2.2

            elif 2.2 == state:
                data_background_info = {i:j for i,j in zip(data_background_info_tags, line) if i != ""}
                LOG.debug(" * (2.2->2.3) Store background info.")
                state = 2.3

            elif 2.3 == state:
                if len(line) >= 25 and line[0] != "":
                    read = [i for i in line if not i.isalpha()]
                    if read[-1] == "":
                        read.pop()
                    data_plate = [read]
                    line_length = len(data_plate[0])
                    LOG.debug(" * (2.3->2.4) Store first plate readout line.")
                    state = 2.4

            elif 2.4 == state:
                if len(line) >= 25 and line[0] != "":
                    read = [i for i in line if not i.isalpha()]
                    if read[-1] == "":
                        read.pop()
                    data_plate.append(read)
                    if line_length != len(data_plate[-1]):
                        LOG.error(" The lines in the plate differ in length. line_length: {}. line: {}".format(line_length, data_plate[-1]))
                    LOG.debug(" * (2.4->2.4) Store another plate readout line.")
                    state = 2.4
                else:
                    channel_wise_reads[data_plate_count] = data_plate
                    channel_wise_info[data_plate_count] = data_background_info
                    data_plate = None
                    LOG.debug(" * (2.4->2) Plate readout complete.")
                    state = 2

    if data_plate:
        channel_wise_reads[data_plate_count] = data_plate
        channel_wise_info[data_plate_count] = data_background_info
        LOG.debug(" * (2.4->None) Overall plate readout complete.")
        state = None

    # Currently: Replace all "" with 0
    channel_wise_reads = {str(i):[["0" if l=="" else l for l in k] for k in j] for i,j in channel_wise_reads.items()}
    channel_wise_info = {str(i):j for i,j in channel_wise_info.items()}

    return plate_info, channel_wise_reads, channel_wise_info



def read_insulin_csv(file):
    """Read screen data file in [] format. Afterwards, map to plate layout.

    The  .csv file structure is not described publicly.

    The general file format is (example read in as .csv)::

    ['User: USER', 'Path: C:\\Program Files (x86)\\BMG\\Omega\\User\\Data\\', 'Test run no.: 33']
    ['Test name: M_InsulinAssay384', 'Date: 29.06.2015', 'Time: 18:40:06']
    ['Fluorescence (FI)']
    ['Well Row', '', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P']
    ['Well Col', '', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24']
    ['Content', 'Time', 'Sample X1', 'Sample X2', 'Sample X3', 'Sample X4', 'Sample X5', 'Sample X6', 'Sample X7', 'Sample X8', 'Sample X9', 'Sample X10', 'Sample X11', 'Sample X12', 'Sample X13', 'Sample X14', 'Sample X15', 'Sample X16', 'Sample X17', 'Sample X18', 'Sample X19', 'Sample X20', 'Sample X21', 'Sample X22', 'Sample X23', 'Sample X24', 'Sample X25', 'Sample X26', 'Sample X27', 'Sample X28', 'Sample X29', 'Sample X30', 'Sample X31', 'Sample X32', 'Sample X33', 'Sample X34', 'Sample X35', 'Sample X36', 'Sample X37', 'Sample X38', 'Sample X39', 'Sample X40', 'Sample X41', 'Sample X42', 'Sample X43', 'Sample X44', 'Sample X45', 'Sample X46', 'Sample X47', 'Sample X48', 'Sample X49', 'Sample X50', 'Sample X51', 'Sample X52', 'Sample X53', 'Sample X54', 'Sample X55', 'Sample X56', 'Sample X57', 'Sample X58', 'Sample X59', 'Sample X60', 'Sample X61', 'Sample X62', 'Sample X63', 'Sample X64', 'Sample X65', 'Sample X66', 'Sample X67', 'Sample X68', 'Sample X69', 'Sample X70', 'Sample X71', 'Sample X72', 'Sample X73', 'Sample X74', 'Sample X75', 'Sample X76', 'Sample X77', 'Sample X78', 'Sample X79', 'Sample X80', 'Sample X81', 'Sample X82', 'Sample X83', 'Sample X84', 'Sample X85', 'Sample X86', 'Sample X87', 'Sample X88', 'Sample X89', 'Sample X90', 'Sample X91', 'Sample X92', 'Sample X93', 'Sample X94', 'Sample X95', 'Sample X96', 'Sample X97', 'Sample X98', 'Sample X99', 'Sample X100', 'Sample X101', 'Sample X102', 'Sample X103', 'Sample X104', 'Sample X105', 'Sample X106', 'Sample X107', 'Sample X108', 'Sample X109', 'Sample X110', 'Sample X111', 'Sample X112', 'Sample X113', 'Sample X114', 'Sample X115', 'Sample X116', 'Sample X117', 'Sample X118', 'Sample X119', 'Sample X120', 'Sample X121', 'Sample X122', 'Sample X123', 'Sample X124', 'Sample X125', 'Sample X126', 'Sample X127', 'Sample X128', 'Sample X129', 'Sample X130', 'Sample X131', 'Sample X132', 'Sample X133', 'Sample X134', 'Sample X135', 'Sample X136', 'Sample X137', 'Sample X138', 'Sample X139', 'Sample X140', 'Sample X141', 'Sample X142', 'Sample X143', 'Sample X144', 'Sample X145', 'Sample X146', 'Sample X147', 'Sample X148', 'Sample X149', 'Sample X150', 'Sample X151', 'Sample X152', 'Sample X153', 'Sample X154', 'Sample X155', 'Sample X156', 'Sample X157', 'Sample X158', 'Sample X159', 'Sample X160', 'Sample X161', 'Sample X162', 'Sample X163', 'Sample X164', 'Sample X165', 'Sample X166', 'Sample X167', 'Sample X168', 'Sample X169', 'Sample X170', 'Sample X171', 'Sample X172', 'Sample X173', 'Sample X174', 'Sample X175', 'Sample X176', 'Sample X177', 'Sample X178', 'Sample X179', 'Sample X180', 'Sample X181', 'Sample X182', 'Sample X183', 'Sample X184', 'Sample X185', 'Sample X186', 'Sample X187', 'Sample X188', 'Sample X189', 'Sample X190', 'Sample X191', 'Sample X192', 'Sample X193', 'Sample X194', 'Sample X195', 'Sample X196', 'Sample X197', 'Sample X198', 'Sample X199', 'Sample X200', 'Sample X201', 'Sample X202', 'Sample X203', 'Sample X204', 'Sample X205', 'Sample X206', 'Sample X207', 'Sample X208', 'Sample X209', 'Sample X210', 'Sample X211', 'Sample X212', 'Sample X213', 'Sample X214', 'Sample X215', 'Sample X216', 'Sample X217', 'Sample X218', 'Sample X219', 'Sample X220', 'Sample X221', 'Sample X222', 'Sample X223', 'Sample X224', 'Sample X225', 'Sample X226', 'Sample X227', 'Sample X228', 'Sample X229', 'Sample X230', 'Sample X231', 'Sample X232', 'Sample X233', 'Sample X234', 'Sample X235', 'Sample X236', 'Sample X237', 'Sample X238', 'Sample X239', 'Sample X240', 'Sample X241', 'Sample X242', 'Sample X243', 'Sample X244', 'Sample X245', 'Sample X246', 'Sample X247', 'Sample X248', 'Sample X249', 'Sample X250', 'Sample X251', 'Sample X252', 'Sample X253', 'Sample X254', 'Sample X255', 'Sample X256', 'Sample X257', 'Sample X258', 'Sample X259', 'Sample X260', 'Sample X261', 'Sample X262', 'Sample X263', 'Sample X264', 'Sample X265', 'Sample X266', 'Sample X267', 'Sample X268', 'Sample X269', 'Sample X270', 'Sample X271', 'Sample X272', 'Sample X273', 'Sample X274', 'Sample X275', 'Sample X276', 'Sample X277', 'Sample X278', 'Sample X279', 'Sample X280', 'Sample X281', 'Sample X282', 'Sample X283', 'Sample X284', 'Sample X285', 'Sample X286', 'Sample X287', 'Sample X288', 'Sample X289', 'Sample X290', 'Sample X291', 'Sample X292', 'Sample X293', 'Sample X294', 'Sample X295', 'Sample X296', 'Sample X297', 'Sample X298', 'Sample X299', 'Sample X300', 'Sample X301', 'Sample X302', 'Sample X303', 'Sample X304', 'Sample X305', 'Sample X306', 'Sample X307', 'Sample X308', 'Sample X309', 'Sample X310', 'Sample X311', 'Sample X312', 'Sample X313', 'Sample X314', 'Sample X315', 'Sample X316', 'Sample X317', 'Sample X318', 'Sample X319', 'Sample X320', 'Sample X321', 'Sample X322', 'Sample X323', 'Sample X324', 'Sample X325', 'Sample X326', 'Sample X327', 'Sample X328', 'Sample X329', 'Sample X330', 'Sample X331', 'Sample X332', 'Sample X333', 'Sample X334', 'Sample X335', 'Sample X336', 'Sample X337', 'Sample X338', 'Sample X339', 'Sample X340', 'Sample X341', 'Sample X342', 'Sample X343', 'Sample X344', 'Sample X345', 'Sample X346', 'Sample X347', 'Sample X348', 'Sample X349', 'Sample X350', 'Sample X351', 'Sample X352', 'Sample X353', 'Sample X354', 'Sample X355', 'Sample X356', 'Sample X357', 'Sample X358', 'Sample X359', 'Sample X360', 'Sample X361', 'Sample X362', 'Sample X363', 'Sample X364', 'Sample X365', 'Sample X366', 'Sample X367', 'Sample X368', 'Sample X369', 'Sample X370', 'Sample X371', 'Sample X372', 'Sample X373', 'Sample X374', 'Sample X375', 'Sample X376', 'Sample X377', 'Sample X378', 'Sample X379', 'Sample X380', 'Sample X381', 'Sample X382', 'Sample X383', 'Sample X384']
    ['Raw Data (450-10/480-10)', '0 h ', '24664', '26204', '25600', '22000', '25216', '26956', '24712', '24936', '28308', '23584', '23492', '25924', '24448', '25652', '24036', '23808', '24608', '23504', '22668', '23636', '22932', '25364', '23236', '24112', '26036', '27116', '26260', '22664', '28128', '24744', '26984', '24936', '23944', '25088', '23912', '24628', '25248', '22848', '26112', '25232', '23148', '26368', '24432', '25216', '26240', '23324', '23148', '23188', '27052', '26568', '23756', '24416', '26272', '24184', '25700', '25284', '25316', '26240', '26192', '25704', '24544', '24344', '27612', '26576', '25708', '26480', '26200', '25412', '23160', '23220', '23760', '23908', '26152', '26232', '25704', '25992', '25372', '26748', '27260', '24840', '25028', '24520', '26028', '24176', '23432', '24908', '24536', '24360', '24756', '23428', '23904', '24880', '24896', '26400', '23664', '22064', '24304', '24584', '25424', '25904', '26936', '26112', '24172', '25216', '25072', '23880', '22912', '25136', '26024', '25088', '25240', '26552', '25852', '25192', '23852', '24672', '21952', '21984', '24960', '24328', '28376', '24260', '25580', '25820', '24660', '24456', '25520', '21500', '24136', '24864', '25136', '25080', '22552', '23828', '24000', '25216', '25096', '26736', '22688', '24040', '22600', '24148', '24376', '23024', '25036', '23652', '25544', '25076', '23624', '27280', '23956', '26012', '22144', '23448', '24944', '25256', '23932', '23488', '25376', '24472', '24708', '25668', '23132', '23696', '23948', '22852', '24892', '21984', '27148', '26524', '26144', '26292', '24888', '24640', '26288', '25808', '22728', '24080', '24856', '24064', '24868', '24320', '24772', '24836', '24756', '26272', '24676', '23104', '24152', '23672', '23396', '23392', '25692', '24440', '24216', '28380', '26932', '25108', '25608', '22764', '24280', '22984', '24628', '24064', '24256', '24336', '24864', '22000', '23040', '27440', '23856', '21824', '24688', '22212', '23436', '23204', '24936', '25564', '24940', '24112', '24288', '23188', '26460', '24836', '27152', '23068', '25964', '23040', '22748', '22996', '23096', '24428', '24576', '25044', '25104', '23688', '23060', '20772', '23372', '21736', '24848', '24728', '26372', '24900', '26136', '24624', '23248', '22524', '24820', '24464', '23828', '22596', '24972', '24192', '24836', '22800', '22172', '23944', '22976', '23480', '26152', '23840', '24324', '22760', '25052', '23052', '28176', '24852', '24712', '25732', '27340', '24328', '25788', '23372', '24220', '22508', '25928', '24620', '22792', '24696', '23984', '26320', '26552', '21400', '22612', '24072', '21388', '21564', '22552', '24384', '26144', '24280', '24492', '38476', '26216', '24056', '23528', '24868', '25120', '24792', '22040', '24680', '23864', '24068', '23772', '24256', '25552', '23236', '24140', '22024', '23072', '22668', '21492', '23784', '27376', '24800', '24564', '25072', '26924', '23820', '25144', '24748', '22516', '28028', '23892', '24740', '24736', '24924', '24196', '26800', '23168', '26708', '21900', '21188', '23112', '21480', '23632', '25720', '25040', '24384', '24452', '27960', '26572', '24056', '25968', '25536', '26556', '24284', '25564', '24204', '23992', '23652', '24296', '25936', '21800', '23420', '21668', '24288', '25000', '22624', '22764', '22572', '23128', '23484', '24524', '24068', '24544', '22712', '24648', '24104', '21560', '22672', '25492', '23184', '22424', '22656', '22668', '23624', '22588', '21108', '23216', '21220', '21996', '21896']
    ['Raw Data (450-10/480-10)', '0 h 3 min', '25696', '24352', '24620', '25292', '24300', '26548', '22892', '24816', '24640', '25760', '23832', '23868', '27720', '23432', '25772', '24668', '24920', '23992', '26156', '24112', '22200', '23444', '24380', '23208', '25624', '25768', '24452', '24300', '27756', '23868', '23964', '24392', '24248', '23896', '25220', '24236', '25324', '23992', '23312', '24728', '24228', '23840', '23672', '22596', '25780', '21592', '21328', '21244', '24432', '22880', '25248', '27220', '26196', '27212', '23944', '26924', '24676', '25660', '23352', '24260', '25392', '23552', '25464', '24976', '24320', '26264', '22680', '23052', '22808', '24388', '25180', '20268', '25712', '24800', '27172', '26000', '26244', '26832', '26292', '24612', '26268', '22888', '24696', '24732', '23732', '25000', '25256', '26060', '24924', '25736', '25344', '24480', '22868', '26500', '23136', '20588', '24372', '24556', '23568', '26328', '25196', '26908', '27876', '23764', '23460', '25388', '24600', '25864', '26116', '24288', '23852', '25420', '23912', '24052', '24676', '24968', '23416', '21476', '25636', '21840', '24912', '23640', '26560', '25464', '24040', '24224', '24000', '25932', '23636', '25784', '25084', '24588', '23056', '23912', '25756', '24320', '24060', '28296', '23208', '22656', '24032', '25636', '23292', '22320', '25520', '24528', '23556', '25740', '24792', '25016', '24928', '22620', '23968', '23076', '25716', '25184', '23344', '22040', '23624', '24060', '25816', '25876', '22376', '22216', '23820', '24316', '24800', '22352', '23948', '23368', '24464', '25776', '24728', '24308', '25400', '23224', '25332', '23320', '23000', '23164', '24028', '23336', '23904', '23696', '23196', '23732', '23036', '23008', '24024', '22240', '22788', '21600', '24436', '25384', '24068', '24656', '26016', '24544', '23532', '24420', '25204', '23324', '25284', '22832', '23184', '24944', '23336', '25232', '23636', '23508', '23136', '20892', '22312', '22744', '23480', '22408', '27036', '25348', '25460', '23232', '23924', '24708', '25644', '22904', '25584', '22432', '22636', '25992', '23028', '23816', '23632', '24660', '22956', '21236', '24240', '21864', '21856', '22760', '23136', '21920', '24528', '25728', '26588', '25448', '24864', '25452', '24756', '25296', '23440', '26260', '27472', '24596', '22388', '25208', '24532', '22624', '24212', '23256', '24292', '24160', '24536', '22416', '22592', '24456', '25408', '24412', '24584', '25980', '25216', '25756', '25888', '25944', '24440', '24300', '23780', '22296', '24728', '26660', '25616', '25092', '25772', '24940', '22924', '24404', '22180', '25568', '25200', '22912', '25208', '26044', '25308', '23572', '24264', '39864', '25576', '25472', '23176', '25956', '25268', '25348', '25884', '22912', '23936', '25780', '23076', '25296', '24560', '23080', '23844', '22452', '22648', '22272', '27764', '25392', '25028', '24272', '27128', '26740', '25788', '23456', '23900', '24552', '23920', '27732', '23060', '23752', '25620', '27300', '24792', '25096', '24348', '23632', '24596', '24068', '24636', '22480', '21088', '24284', '25540', '23892', '25524', '25304', '28320', '22956', '25288', '22792', '25644', '25832', '25872', '23400', '22596', '24732', '24776', '25448', '21268', '23628', '24536', '21864', '24868', '22596', '23636', '25304', '24580', '23940', '23668', '22980', '22664', '20792', '25876', '23724', '24444', '22676', '23704', '23100', '22952', '24080', '22988', '22524', '24136', '22804', '23448', '23272', '22216', '21596']
    ...
    ['Raw Data (450-10/480-10)', '24 h ', '92800', '82816', '78852', '24468', '25900', '22324', '20384', '66892', '101476', '85164', '22176', '174492', '39984', '73952', '143660', '70868', '72600', '21304', '24376', '22420', '23348', '22312', '23616', '20420', '85200', '70952', '73548', '69348', '24384', '25488', '24700', '24380', '96772', '50552', '24136', '260000', '23528', '128728', '79116', '73652', '22992', '22748', '24100', '24884', '24032', '21552', '25680', '22408', '73524', '74556', '72456', '93120', '24452', '22868', '21500', '23360', '102440', '85836', '92504', '260000', '81764', '21776', '100372', '78460', '22164', '25028', '23384', '23144', '24036', '23016', '23140', '22312', '74172', '76156', '54784', '48004', '22324', '27640', '23160', '156636', '106144', '88764', '73328', '70260', '23296', '97192', '162224', '91048', '23440', '23356', '22264', '24996', '23776', '23036', '21812', '21800', '90348', '84308', '23584', '63112', '22240', '22876', '22880', '23112', '103736', '89732', '63072', '22548', '82852', '73176', '35872', '76016', '24880', '24264', '22696', '23320', '23920', '22584', '22168', '21840', '74412', '75252', '37532', '71384', '23980', '22852', '23152', '22656', '105296', '92144', '20632', '29200', '23780', '24208', '120060', '79868', '21412', '22828', '22312', '24512', '21984', '21824', '21460', '21696', '95996', '77544', '79152', '24700', '22440', '22000', '22428', '22264', '104392', '154872', '22544', '232136', '21544', '90364', '68496', '73432', '22336', '22000', '22216', '24752', '21292', '23448', '22056', '21480', '103124', '86196', '107096', '95484', '23784', '23884', '22992', '19860', '99912', '90396', '46256', '69084', '24268', '185948', '260000', '72548', '24996', '23960', '24620', '23472', '23204', '23956', '23532', '23268', '110844', '86672', '21496', '61340', '23936', '22656', '22844', '22512', '100960', '101568', '22952', '260000', '23348', '72924', '29148', '78608', '22168', '20440', '23472', '24088', '23968', '21088', '21792', '21124', '106716', '103196', '85308', '21208', '21468', '21860', '22968', '23076', '108668', '107004', '23496', '25536', '20936', '72692', '119792', '80572', '22636', '24564', '23060', '22456', '23328', '22512', '22072', '23936', '95544', '88600', '35492', '94352', '23652', '24104', '24696', '22556', '110020', '75004', '81776', '260000', '22236', '79736', '126644', '82300', '21760', '22452', '21332', '22652', '22180', '22880', '23848', '22664', '139048', '110560', '121972', '86100', '23504', '23412', '24436', '22116', '99472', '98072', '20612', '75236', '92184', '36724', '52132', '77144', '20228', '22136', '22004', '22268', '23948', '22392', '22816', '20148', '68720', '87972', '74404', '23064', '22936', '32204', '23896', '22348', '111532', '108596', '23384', '77400', '22676', '156324', '107708', '76944', '22200', '22560', '23808', '23364', '22672', '20848', '23488', '20760', '151656', '96264', '50708', '89168', '24312', '21336', '21792', '24292', '114804', '82816', '78708', '260000', '23416', '22292', '22464', '76528', '22944', '22496', '23256', '23560', '21752', '21164', '22680', '22224', '71908', '84052', '90484', '21520', '24096', '22804', '25404', '21080', '111256', '113704', '44036', '260000', '23592', '22244', '197724', '80332', '23544', '22212', '23016', '26352', '22480', '21744', '23184', '22024', '74344', '91832', '42572', '80732', '22032', '24688', '21960', '69204', '122800', '82632', '78348', '197916', '44216', '74516', '134416', '76968', '131412', '18012', '22432', '20456', '20400', '22580', '22384', '18788']


    .. todo:: Extract all necessary information
    .. todo:: Show correct output format


    Args:
        filename (str): Path to the file with  data in the envision
            file format.


    Returns:
        plate_info (dict of ?): Information per plate
        channel_wise_reads (dict of list of lists): Read out tales
        channel_wise_info (dict of ?): Information per read out table

    """



    # Our possible parser states:
    #
    # 1: searching for Plate information I & store
    # 1.1: searching for Plate information II & store
    # 1.2: searching for Plate information III & store
    # 2: searching for well row definition & store.
    # 2.1: searching for well column definition & store.
    # 3: searching for data header & store.
    # 4: searching for data column & store

    state = 1
    data_plate_count = 0
    plate_reads = {}
    hour_re = "(\d+) h"
    min_re = "(\d+) min"

    with open(file) as csvfile:
        #dialect = csv.Sniffer().sniff(csvfile.read(1024))
        #sample_text = ''.join(csvfile.readline() for x in range(3))
        #dialect = csv.Sniffer().sniff(sample_text)
        #reader = csv.reader(csvfile, dialect)
        #csvfile.seek(0)
        #import pdb; pdb.set_trace()
        reader = csv.reader(csvfile, delimiter = ",")
        for i, line in enumerate(reader):
            if len(line) < 1:
                continue
            LOG.debug("Line %s: %s", i, line)
            if 1 == state:
                if line[0].startswith("User"):
                    LOG.debug(" * (1->1.1) Found plate info I")
                    plate_info = line
                    state = 1.1
            elif 1.1 == state:
                if line[0].startswith("Test"):
                    LOG.debug(" * (1.1->1.2) Found plate info II")
                    plate_info += line
                    state = 1.2
            elif 1.2 == state:
                LOG.debug(" * (1.2->2) Save plate info III")
                plate_info += line
                state = 2
            elif 2 == state:
                if line[0].startswith("Well Row"):
                    LOG.debug(" * (2->2.1) Found well row info")
                    well_row = [i for i in line[1:] if i != '']
                    state = 2.1
            elif 2.1 == state:
                if line[0].startswith("Well Col"):
                    LOG.debug(" * (2.1->3) Found well column info")
                    well_column = [i for i in line[1:] if i != '']
                    state = 3
            elif 3 == state:
                if line[0].startswith("Content"):
                    LOG.debug(" * (3->4) Found content row (currently not storing)")
                    state = 4
                    #import pdb; pdb.set_trace()
            elif 4 == state:
                hour = re.search(hour_re, line[1])
                minute = re.search(min_re, line[1])
                if hour:
                    LOG.debug(" * (4->4) Found data row. Storing.")
                    hour = int(hour.group(1))
                    if minute:
                        minute = int(minute.group(1))
                    else:
                        minute = 0
                    plate_reads[60*hour + minute] = line[2:]
                    state = 4
    # Transform well_row and well_column elements
    # Give back tables instead of lists
    # For now, assume that elements are ordered: 1st row, 2nd row, 3rd row, and so on...
    width = well_row.count("A")
    plate_reads2 = {i: [j[i:i+width] for i in range(0, len(j), width)]  for i,j in plate_reads.items()}
    return plate_info, plate_reads2, {}