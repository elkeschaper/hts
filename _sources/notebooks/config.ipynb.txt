{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".. _config\n",
    "\n",
    "## HTS Configuration files\n",
    "\n",
    "HTS can read in config files, that contain all information on the data handling of the screen.\n",
    "There are three kinds of config files, :ref:`plate layouts<plate_layout>`, :ref:`protocol configs<config_protocol>` and :ref:`run configs<config_run>`.\n",
    "\n",
    ".. _plate_layout:\n",
    "\n",
    "Plate layout file\n",
    "---------------------------\n",
    "\n",
    "The plate layout file provides general information on the .\n",
    "\n",
    "\n",
    "\n",
    ".. _config_protocol:\n",
    "\n",
    "### Protocol file\n",
    "\n",
    "The Protocol file defines general aspects of your HTS data handling that are applied to all your experimental runs. This can include\n",
    "\n",
    "- Data transformations and normalizations\n",
    "- Quality Control choice\n",
    "- Hit selection approach\n",
    "\n",
    "This is an example of a protocol file::\n",
    "\n",
    "    name = my custom name\n",
    "\n",
    "    [Global signal normalization]\n",
    "        tags = preprocessing,\n",
    "        method = calculate_control_normalized_signal\n",
    "        data_tag_readout = my_custom_readout_tag\n",
    "        negative_control_key = neg_0\n",
    "        positive_control_key = pos_0\n",
    "        local = False\n",
    "        data_tag_normalized_readout = my_custom_normalized_readout_tag\n",
    "        data_tag_pvalue_sample_vs_neg_control = my_custom_pvalue_neg_control_tag\n",
    "        data_tag_pvalue_sample_vs_pos_control = my_custom_pvalue_pos_control_tag\n",
    "\n",
    "\n",
    "    [Gaussian process normalization]\n",
    "        tags = analysis,\n",
    "        method = data_normalization.do_gaussian_process_normalization\n",
    "        data_tag_readout = my_custom_normalized_readout_tag\n",
    "        sample_tag_input = s\n",
    "        [[rbf]]\n",
    "            is_per_plate = True\n",
    "            is_zigzag = False\n",
    "            [[[RBF]]]\n",
    "                kernel_type=RBF\n",
    "                [[[[constraints]]]]\n",
    "                    [[[[[lengthscale]]]]]\n",
    "                        fix = 2\n",
    "                    [[[[[variance]]]]]\n",
    "                        fix = 1\n",
    "\n",
    "\n",
    "    [Create an QC Knitr document]\n",
    "        tags = qc,\n",
    "        method = qc_knitr.create_report\n",
    "        qc_helper_methods_path = qc_helper_methods.R\n",
    "        [[Plate layout]]\n",
    "            method = plate_layout\n",
    "        [[1: Net FRET (unchanged)]]\n",
    "            method = heat_map\n",
    "            [[[knitr_options]]]\n",
    "                options = \"fig.height=7\"\n",
    "            [[[filter]]]\n",
    "                y = net_fret\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    ".. _config_run:\n",
    "\n",
    "### Run configuration file\n",
    "\n",
    "\n",
    "The Run file defines aspects of your HTS data handling specific to individual HTS runs. This can include\n",
    "\n",
    "- Path and data format of screen data and auxiliary data\n",
    "- Path and data format of output files (for example QC and analysis files)\n",
    "- Arbitrary additional information, such as the experimentator who performed the HTS run.\n",
    "\n",
    "\n",
    "\n",
    "#### 1. Load all dependencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/elkeschaper/.virtualenvs/hts/lib/python3.5/site-packages/matplotlib/__init__.py:1350: UserWarning:  This call to matplotlib.use() has no effect\n",
      "because the backend has already been chosen;\n",
      "matplotlib.use() must be called *before* pylab, matplotlib.pyplot,\n",
      "or matplotlib.backends is imported for the first time.\n",
      "\n",
      "  warnings.warn(_use_error_msg)\n"
     ]
    }
   ],
   "source": [
    "# %matplotlib inline is only necessary in inline mode\n",
    "%matplotlib inline\n",
    "import logging\n",
    "import os\n",
    "\n",
    "from hts.data_tasks import qc_matplotlib\n",
    "from hts.run.run import Run\n",
    "from hts.paths import TUTORIAL_DATA_NORMALIZATION_PATH\n",
    "\n",
    "logging.basicConfig(level=logging.ERROR)\n",
    "config_path = TUTORIAL_DATA_NORMALIZATION_PATH\n",
    "\n",
    "print(\"Find the configuration file for this tutorial here: {}\".format(config_path))\n",
    "run = Run.create(path=config_path, origin=\"config\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Look here to see how to (install HTS)[install]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Read in your high throughput screening data\n",
    "\n",
    "Let's read in some data defined in a config file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Find the configuration file for this tutorial here: /Users/elkeschaper/Python_projects/HTS/test_data/Runs/run_config_tutorial_1.txt\n",
      "John Doe\n",
      "j.does@htslab.com\n",
      "False\n",
      "['plate1', 'plate2', 'plate3', 'plate4', 'plate5', 'plate6']\n",
      "/Users/elkeschaper/Python_projects/HTS/test_data/Plate_layouts/plate_layout_tutorial_1.csv\n",
      "csv\n",
      "/Users/elkeschaper/Python_projects/HTS/test_data/Raw_data/Tutorial_1/EnVision_24h\n",
      "['plate1.csv', 'plate2.csv', 'plate3.csv', 'plate4.csv', 'plate5.csv', 'plate6.csv']\n",
      ",\n",
      "csv\n",
      "/Users/elkeschaper/Python_projects/HTS/test_data/Protocols/protocol_config_tutorial_1.txt\n",
      "config\n",
      "/Users/elkeschaper/Python_projects/HTS/test_data/Analysis/Tutorial_1/Gaussian_process_normalization\n",
      "/Users/elkeschaper/Python_projects/HTS/test_data/Analysis/Tutorial_1/EnVisision_24h.csv\n",
      "/Users/elkeschaper/Python_projects/HTS/test_data/Analysis/Tutorial_1/EnVisision_24h.csv\n"
     ]
    }
   ],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
