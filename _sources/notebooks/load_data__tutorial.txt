{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "raw_mimetype": "text/markdown"
   },
   "source": [
    "# Tutorial: Load data\n",
    "\n",
    "## Create a `run config` file.\n",
    "\n",
    "The `run config` file is at the heart of all your data. Here, all paths file I/O, formats and meta data specific to your data are defined. It's based on [configobj](https://configobj.readthedocs.io/) (see [specifications](https://configobj.readthedocs.io/en/latest/configobj.html#the-config-file-format)).\n",
    "\n",
    "See [configuration files](../config.rst) for general instructions.\n",
    "\n",
    "Download [run config template](../tutorial_data/run_config_template_1.txt)\n",
    "\n",
    "Let's take a look at the different parts of the file.\n",
    "\n",
    "### Define run_config file header\n",
    "\n",
    "You can add arbitrary header information.\n",
    "```\n",
    "experimenter = John Doe\n",
    "experimenter_mail = john.doe@hts.org\n",
    "```\n",
    "\n",
    "`plate_names` defines by which names your plates are displayed and accessed: \n",
    "\n",
    "```\n",
    "plate_names = my_first_plate_name, my_second_plate_name, my_third_plate_name\n",
    "```\n",
    "\n",
    "In case `base_path` is defined, it is prepended to all other occurences of `*path` in this run config file.\n",
    "```\n",
    "base_path = /this/path/is/always/prepended\n",
    "```\n",
    "\n",
    "\n",
    "### Define run_config readout data source\n",
    "\n",
    "The readout data is defined with a `[readout]` tag. \n",
    "The readout data itself may have multiple levels. First, each type of readouts is given a name, e.g. `[[my_readouts_name]]`. For each type of readouts, there may be several readouts (for example, the raw data file may contain multiple measurements for each well).\n",
    "\n",
    "Example:\n",
    "```\n",
    "[readout]\n",
    "    [[my_readouts_name]]\n",
    "        path = local/path/to/my/raw/data\n",
    "        filenames = experiment 1.csv, experiment 2a.csv, experiment_2b.csv\n",
    "        format = csv\n",
    "        delimiter = ','\n",
    "```\n",
    "\n",
    "The tag `format` defines the format of the datafile. Currently implemented are [csv](hts.plate_data.html#module-hts.plate_data.plate_data_io), simple [excel]([csv](hts.plate_data.html#module-hts.plate_data.plate_data_io)), and [envision_csv](hts.plate_data.html#module-hts.plate_data.readout_io).\n",
    "\n",
    "Additional parsers can easily be added to [Generic: plate_data_io](hts.plate_data.html#module-hts.plate_data.plate_data_io) or [Readout only: readout_io](hts.plate_data.html#module-hts.plate_data.readout_io) and integrated in HTS.\n",
    "\n",
    "\n",
    "\n",
    "#### One file per plate.\n",
    "\n",
    "For each plate, one data file is defined. Either, they are listed:\n",
    "\n",
    "```\n",
    "filenames = experiment 1.csv, experiment 2a.csv, experiment_2b.csv\n",
    "```\n",
    "\n",
    "or, when the filenames follow a simple pattern, this can be shortened to:\n",
    "```\n",
    "filename = experiment2_{}.csv\n",
    "filenumber = a, b, c\n",
    "```\n",
    "\n",
    "#### One file for all plates\n",
    "\n",
    "Commonly, HTS data is saved with every sample given in one row in a .csv file. We can read this data with `HTS` and map it back to the plate layout with `format = csv_one_well_per_row` \n",
    "\n",
    "For example:\n",
    "```\n",
    "     [[my_readouts_name_3]]\n",
    "         path = local/path/to/my/raw/data_3\n",
    "         format = csv_one_well_per_row\n",
    "         column_plate_name = plate_name  #What is the column name of the experimental plate?\n",
    "         column_well = plate_well   #What is the column name of the experimental well?\n",
    "         columns_readout = readout_1, readout_2, readout_3  #Which columns contain readouts?\n",
    "         columns_meta = extra_info_1, extra_info_2  #Which columns contain other interesting meta information?\n",
    "         width = 24  #What is the plate layout width?\n",
    "         height = 16  #What is the plate layout height?\n",
    "```\n",
    "\n",
    "\n",
    "With the readout data source define, we can try reading in the data:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load the data with the run config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Run instance>\n",
      "Path to run config file: /Users/elkeschaper/Python_projects/HTS/test_data/Runs/run_config_tutorial_1.txt\n",
      "Number of plates: 6\n",
      "width: 24\n",
      "height: 16\n"
     ]
    }
   ],
   "source": [
    "from hts.run.run import Run\n",
    "from hts.paths import TUTORIAL_DATA_NORMALIZATION_PATH\n",
    "\n",
    "config_path = TUTORIAL_DATA_NORMALIZATION_PATH\n",
    "\n",
    "run = Run.create(path=config_path, origin=\"config\")\n",
    "\n",
    "print(run)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this run instance, we can now [create a quality control report](qc) or different types of analyses."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
